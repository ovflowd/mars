group 'sant0ro'
version '1.0'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://plugins.gradle.org/m2/'
    }
    maven {
        url 'https://repo.spring.io/milestone'
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    testCompile group: 'org.junit.jupiter', 'name': 'junit-jupiter-api', version: junitJupiterVersion
    testCompile group: 'org.junit.jupiter', 'name': 'junit-jupiter-engine', version: junitJupiterVersion

    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: junitPlatformVersion
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
}

buildscript {
    ext {
        springBootVersion = '2.0.0.M7'
        junitPlatformVersion = '1.0.2'
        junitJupiterVersion  = '5.0.2'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url 'https://repo.spring.io/milestone'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}")
    }
}

sourceSets {
    test {
        java.srcDirs = ['src/test']
    }
    main {
        java.srcDirs = ['src/main']
    }
}

junitPlatform {
    details 'tree'
}

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
}

task prepareDockerImage() {
    group = 'docker'
    description = 'Create Image for Docker'

    doFirst {
        copy {
            from war.archivePath
            into 'build/docker/app/'
        }
        copy {
            from 'src/main/docker/app/'
            into 'build/docker/app'
        }
        copy {
            from('src/main/docker/') {
                include 'Dockerfile'
            }
            into 'build/docker'
        }
        copy {
            from('src/main/docker/') {
                include 'docker-entrypoint.sh'
            }
            into 'build/docker/app'
        }
        file("build/docker/app/${war.archiveName}").renameTo("build/docker/app/application.jar")
    }
}

afterEvaluate {
    def junitPlatformTestTask = (JavaExec) project.tasks.getByName('junitPlatformTest')

    jacoco {
        applyTo(junitPlatformTestTask)
    }

    project.task(type: JacocoReport, "jacocoJupTestReport") {
        executionData(junitPlatformTestTask)
        sourceSets(sourceSets.main)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)

        reports {
            xml.enabled true
            xml.destination file("${buildDir}/jacoco/report.xml")
            html.enabled true
            html.destination file("${buildDir}/jacoco/html")
        }
    }

    check.dependsOn jacocoJupTestReport
}